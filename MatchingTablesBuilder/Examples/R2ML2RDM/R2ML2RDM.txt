-- trg_BuiltIn.allInstances -> forAll (bi | src_DatatypePredicate.allInstances -> one(dtp | dtp.name = bi.buildInID))
-- src_Class.allInstances -> forAll (c | trg_Class.allInstances -> one (cc | c.name = cc.name))
-- trg_ObjectProperty.allInstances -> forAll(op | src_Attribute.allInstances->one (a | a.name = op.name) or src_DataOperation.allInstances->one (do | do.name = op.name) or src_ReferenceProperty.allInstances->one (rp | rp.name = op.name))
--
--
--src_Conjuction.allInstances->forAll(c | src_ExistentiallyQuantifiedFormula.allInstances->collect(c | c.formula_LogicalFormula_QuantifiedFormula->flatten())->excludes(c) and c.formulas_Conjuction_LogicalFormula->size() = 2 and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_Disjunction))->collect(e | e.oclAsType(src_Disjunction).formulas_Disjunction_LogicalFormula)->forAll(c | c.oclIsTypeOf(src_EqualityAtom)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_UniversallyQuantifiedFormula))->collect(e | e.oclAsType(src_UniversallyQuantifiedFormula).formula_LogicalFormula_QuantifiedFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_Implication)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_ExistentiallyQuantifiedFormula))->collect(e | e.oclAsType(src_QuantifiedFormula).formula_LogicalFormula_QuantifiedFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_Conjuction)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_AtLeastQuantifiedFormula))->collect(e | e.oclAsType(src_QuantifiedFormula).formula_LogicalFormula_QuantifiedFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_ReferencePropertyAtom)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_AtMostQuantifiedFormula))->collect(e | e.oclAsType(src_QuantifiedFormula).formula_LogicalFormula_QuantifiedFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_ReferencePropertyAtom)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_AtLeastAndAtMostQuantifiedFormula))->collect(e | e.oclAsType(src_QuantifiedFormula).formula_LogicalFormula_QuantifiedFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_ReferencePropertyAtom)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_AttributionAtom))->size() = 0 and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_DatatypePredicateAtom))->size() = 0 and c.formulas_Conjuction_LogicalFormula->collect(c | c.oclIsTypeOf(src_ReferencePropertyAtom))->flatten()->size() > 0 and trg_Atom.allInstances->exists(a | a.name = 'ClassAtom'))
--
--
--src_Conjuction.allInstances->forAll(c | src_ExistentiallyQuantifiedFormula.allInstances->asSequence()->collect(c | c.formula_LogicalFormula_QuantifiedFormula->flatten())->excludes(c) and c.formulas_Conjuction_LogicalFormula->size() = 2 and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_Disjunction))->collect(e | e.oclAsType(src_Disjunction).formulas_Disjunction_LogicalFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_EqualityAtom)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_UniversallyQuantifiedFormula))->collect(e | e.oclAsType(src_UniversallyQuantifiedFormula).formula_LogicalFormula_QuantifiedFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_Implication)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_ExistentiallyQuantifiedFormula))->collect(e | e.oclAsType(src_QuantifiedFormula).formula_LogicalFormula_QuantifiedFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_Conjuction)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_AtLeastQuantifiedFormula))->collect(e | e.oclAsType(src_QuantifiedFormula).formula_LogicalFormula_QuantifiedFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_ReferencePropertyAtom)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_AtMostQuantifiedFormula))->collect(e | e.oclAsType(src_QuantifiedFormula).formula_LogicalFormula_QuantifiedFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_ReferencePropertyAtom)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_AtLeastAndAtMostQuantifiedFormula))->collect(e | e.oclAsType(src_QuantifiedFormula).formula_LogicalFormula_QuantifiedFormula)->flatten()->forAll(c | c.oclIsTypeOf(src_ReferencePropertyAtom)) and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_AttributionAtom))->size() = 0 and c.formulas_Conjuction_LogicalFormula->select(c | c.oclIsTypeOf(src_DatatypePredicateAtom))->size() = 0 and c.formulas_Conjuction_LogicalFormula->collect(c | c.oclIsTypeOf(src_ReferencePropertyAtom))->flatten()->size() > 0 and 
--
-- and	a.hasPredicateSymbol_Atom_PredicateSymbol.intersectionOf_Class_IntersectionClass->includesAll(c.formulas_Conjuction_LogicalFormula->asSequence()->select(c | c.oclIsTypeOf(src_ObjectClassificationAtom))->forAll(e | trg_Class.allInstances->exists(class | e.oclAsType(src_ObjectClassificationAtom).type_Class_ObjectClassificationAtom.name = class.name)))
--				and a.hasPredicateSymbol_Atom_PredicateSymbol.intersectionOf_Class_IntersectionClass->includesAll(c.formulas_Conjuction_LogicalFormula->asSequence()->select(c | not c.oclIsTypeOf(src_ObjectClassificationAtom)))
--				and trg_IndividualVariable.allInstances->exists(iv | a.terms.allInstances->forAll(at | trg_IndivitualVariable.allInstances->exists(iv | at.name = iv.name ))))
--
--
--
--
-- C4
trg_Individual.allInstances->forAll(i | src_ObjectVariable.allInstances->exists(ov | ov.name = i.name) or src_ObjectName.allInstances->exists(on | on.name = i.name ))
-- C5
src_Datatype.allInstances->forAll(d | trg_PrimitiveType.allInstances->exists(p | p.name = d.name))
-- C6
trg_ObjectProperty.allInstances->forAll(p | src_ReferenceProperty.allInstances->exists(r | r.name=p.name) or src_DataOperation.allInstances->exists(d | d.name=p.name) or src_Attribute.allInstances->exists(a | a.name=p.name))