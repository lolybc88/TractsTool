src_CPL.allInstances->size() = trg_Program.allInstances->size()
src_CPL.allInstances->size() = trg_Service.allInstances->select(s|s.name='unnamed')->size()
src_CPL.allInstances -> forAll(c | trg_Service.allInstances -> one(s | s.name='unnamed' and s.declarations_Declaration_Service -> forAll(d | src_SubAction.allInstances -> one(sA | d.name = sA.id))))
src_Incoming.allInstances -> forAll(i | trg_SIPMethodName.allInstances->one(smn|smn.name=#trg_INVITE and trg_Method.allInstances->one(m|m.direction=#trg_inn and m.methodName_Method_MethodName = smn)))
src_Default.allInstances -> forAll(d | trg_SelectDefault.allInstances -> one(sd | sd.commentsBefore->first()='default' and if (d.contents_Node_NodeContainer.oclIsTypeOf(src_SubCall)) then (sd.statements_SelectMember_Statement -> first().oclIsTypeOf(trg_ReturnStat)) else if  (d.contents_Node_NodeContainer.oclIsTypeOf(src_AddressSwitch)) then (sd.statements_SelectMember_Statement -> first().oclIsTypeOf(trg_SelectStat))  else if  (d.contents_Node_NodeContainer.oclIsTypeOf(src_Proxy)) then (sd.statements_SelectMember_Statement -> first().oclIsTypeOf(trg_ReturnStat) or sd.statements_SelectMember_Statement -> first().oclIsTypeOf(trg_CompoundStat)) else true endif endif	endif))
src_Busy.allInstances -> union(src_NoAnswer.allInstances -> union(src_Redirection.allInstances->union(src_SwitchedAddress.allInstances))) -> forAll(b | trg_SelectCase.allInstances -> one(sc | if (b.contents_Node_NodeContainer.oclIsTypeOf(src_SubCall)) then (trg_ReturnStat.allInstances->one(rs|rs = sc.statements_SelectMember_Statement -> first() and trg_FunctionCallExp.allInstances->one(fce | fce = rs.returnedValue_Expression_ReturnStat and trg_FunctionCall.allInstances->one(fc | fc = fce.functionCall_FunctionCall_FunctionCallExp)))) else if  (b.contents_Node_NodeContainer.oclIsTypeOf(src_AddressSwitch)) then (sc.statements_SelectMember_Statement -> first().oclIsTypeOf(trg_SelectStat)) else if  (b.contents_Node_NodeContainer.oclIsTypeOf(src_Proxy)) then (trg_ReturnStat.allInstances->one(rs |rs = sc.statements_SelectMember_Statement -> first() and trg_ForwardExp.allInstances->one(fe | fe = rs.returnedValue_Expression_ReturnStat and trg_ConstantExp.allInstances->one(ce | ce = fe.exp_Expression_ForwardExp)))) else true endif endif endif and trg_Constant.allInstances->one(rc |  rc = sc.values_Constant_SelectCase->first())))
src_SwitchedAddress.allInstances -> forAll(sa | trg_StringConstant.allInstances->one(st | st.value=sa.is))
src_AddressSwitch.allInstances -> forAll(as | trg_SelectStat.allInstances->one(ss | trg_SIPHeaderPlace.allInstances->one(shp | shp = ss.matchedExp_Expression_SelectStat and if as.field='origin' then shp.header=#trg_FROM else shp.header=#trg_TO endif and trg_SelectDefault.allInstances->one(sd | sd=ss.selectDefault_SelectDefault_SelectStat))))
src_SubCall.allInstances->size() = trg_FunctionCallExp.allInstances->size() and src_SubCall.allInstances->size() = trg_FunctionCall.allInstances->size()
src_Location.allInstances -> forAll(l | trg_URIConstant.allInstances -> one(uc | uc.uri = l.url and src_Redirect.allInstances->forAll(r | trg_HeadedMessageField.allInstances -> one(hmf | hmf.headerId = '#contact:' and trg_ConstantExp.allInstances->one(ce | ce=hmf.exp_Expression_MessageField and ce=hmf.exp_Expression_MessageField and ce.value_Constant_ConstantExp=uc and trg_RedirectionErrorResponse.allInstances->one(rer| rer.errorKind=if r.permanent='true' then #trg_MOVED_PERMANENTLY else #trg_MOVED_TEMPORARILY endif and trg_ConstantExp.allInstances->one(cep|trg_ConstantExp.allInstances->one(cep2|trg_ReasonMessageField.allInstances->one(rmf|rmf.exp_Expression_MessageField=cep2 and trg_WithExp.allInstances->one(we|we.exp_Expression_WithExp=cep))))))))))
src_SubAction.allInstances->size() + src_Incoming.allInstances->size() + src_CPL.allInstances->size() = trg_LocalFunctionDeclaration.allInstances->size() + trg_Method.allInstances->select(m|m.direction=#trg_inn)->size() + trg_Program.allInstances->size()
src_Busy.allInstances->size() + src_NoAnswer.allInstances->size() + src_Redirection.allInstances->size() + src_SwitchedAddress.allInstances->size() = trg_SelectCase.allInstances->select(sc|(sc.commentsBefore->first()='// busy' or sc.commentsBefore->first()='// noanswer' or sc.commentsBefore->first()='// redirection') and trg_ResponseConstant.allInstances->one(rc|rc=sc.values_Constant_SelectCase->first()))->size() + trg_StringConstant.allInstances->size()
src_Otherwise.allInstances->size() + src_Default.allInstances->size() + src_AddressSwitch.allInstances->size() = trg_SelectDefault.allInstances->size() + trg_SIPHeaderPlace.allInstances->size()
src_Proxy.allInstances->forAll(p|trg_Variable.allInstances->one(v|trg_SelectStat.allInstances->one(ss|ss.matchedExp_Expression_SelectStat=v and trg_CompoundStat.allInstances->one(cs|cs.statements_CompoundStat_Statement->includes(ss)))))
src_Redirect.allInstances->size() + src_Redirection.allInstances->size() = trg_RedirectionErrorResponse.allInstances -> select(rer | rer.errorKind.oclIsUndefined() or rer.errorKind=#trg_MOVED_PERMANENTLY or rer.errorKind=#trg_MOVED_TEMPORARILY)->size()
src_Location.allInstances -> forAll(l | trg_URIConstant.allInstances -> one(uc | uc.uri = l.url))