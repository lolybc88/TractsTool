src_Model.allInstances->size() = trg_Model.allInstances->size()
src_Model.allInstances->forAll(mS | trg_Model.allInstances->exists(mT | mS.classes_Class_Model->forAll(cS | mT.classes_Class_Model->exists(cT | cS.name = cT.name))))
src_Model.allInstances->forAll(mS | trg_Model.allInstances->exists(mT | mS.enumerations_Enumeration_Model->forAll(eS | mT.enumerations_Enumeration_Model->exists(eT | eS.name = eT.name))))
src_Enumeration.allInstances->forAll(e | trg_Enumeration.allInstances->exists(e2 | e.name = e2.name and e.literal_Enumeration_Literal->forAll(l | e2.literal_Enumeration_Literal->exists(l2 | l.name = l2.name ))))
src_Class.allInstances->forAll(classS | trg_Class.allInstances->exists(classT | classS.name = classT.name) and trg_Class.allInstances->exists(c3 | c3.name = 'State'.concat(classS.name) and c3.isAbstract))
src_Class.allInstances->forAll(classS | trg_Class.allInstances->exists(classT | classS.name = classT.name and trg_Class.allInstances->exists(c3 | c3.name = 'State'.concat(classS.name) and c3.isAbstract and classS.stateMachine_Class_StateMachine.states_State_StateMachine->forAll(state | trg_Class.allInstances->exists(c5 | state.name = c5.name and c5.superClass_Class_Class = c3)))))
src_State.allInstances->forAll(st | trg_Class.allInstances->exists(c | st.name = c.name and st.transitions_State_Transition->forAll(trans | c.operations_Class_Operation->exists(op | trans.event_Event_Transition.operation_Event_Operation.name = op.name))))
src_Class.allInstances->forAll(classS | trg_Class.allInstances->exists(classT| classS.name = classT.name and classS.features_Class_StructuralFeature->select(a | a.oclIsTypeOf(src_Reference))->forAll(ref | classT.features_Class_Field->exists(field | ref.oclAsType(src_Reference).name = field.name and ref.oclAsType(src_Reference).type_Class_Reference.name = field.complexType_ComplexType_Field.name))))
src_Class.allInstances->forAll(classS | trg_Class.allInstances->exists(classT| classS.name = classT.name and classS.features_Class_StructuralFeature->select(a | a.oclIsTypeOf(src_Attribute))->forAll(att | classT.features_Class_Field->exists(field | att.oclAsType(src_Attribute).name = field.name and (if (att.oclAsType(src_Attribute).type = #src_String) then (field.simpleType = #trg_String) else if  (att.oclAsType(src_Attribute).type = #src_Integer) then (field.simpleType = #trg_Integer) else if (att.oclAsType(src_Attribute).type = #src_Boolean) then (field.simpleType = #trg_Boolean) else false endif endif endif))))) 
src_Class.allInstances->forAll(classS | trg_Class.allInstances->exists(classT| classS.name = classT.name and classS.operations_Class_Operation->forAll(opS | classT.operations_Class_Operation->exists(opT | opS.name = opT.name))))
src_Class.allInstances->forAll(classS | trg_Class.allInstances->exists(classT| classS.name = classT.name and classS.operations_Class_Operation->forAll(opS | classT.operations_Class_Operation->exists(opT | opS.name = opT.name and opS.parameter_Operation_Parameter->forAll(paramS | opT.parameter_Operation_Parameter->exists(paramT | paramS.name = paramT.name and ((if (paramS.dataType = #src_String) then (paramT.dataType = #trg_String) else if (paramS.dataType = #src_Integer) then (paramT.dataType = #trg_Integer) else if (paramS.dataType = #src_Boolean) then (paramT.dataType = #trg_Boolean) else false endif endif endif) or (paramS.classType_Class_Parameter.name = paramT.complexType_ComplexType_Parameter.name)) ))))))