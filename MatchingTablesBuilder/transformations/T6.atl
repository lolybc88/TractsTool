-- @path SimpleUML=/UML2ER/Metamodels/SimpleUml.ecore
-- @path ER=/UML2ER/Metamodels/ER.ecore

module UML2ER;
create OUT : ER from IN : SimpleUML;

rule Package {
	from
		s: SimpleUML!Package
	to
		t: ER!ERModel (
			entities <- s.ownedElements	
		)
}

helper context SimpleUML!Class def: allClasses : Sequence(SimpleUML!Class) =
 self.superClasses->
 	iterate(e; acc : Sequence(SimpleUML!Class) = Sequence {} | acc->
 		union(Set{e})
			->union(e.allClasses) );

helper context SimpleUML!Class def : getAllProperties : Sequence (SimpleUML!Properties) =
	self.allClasses.including(self).flatten()->
		collect(e | e.ownedProperty).flatten();

rule Class {
	from s: SimpleUML!Class
	to t: ER!EntityType (
			name <- s.name,
			features <- s.getAllProperties->collect (e | thisModule.Property(e)) )}

lazy abstract rule Property{
	from s: SimpleUML!Property
	to t: ER!Feature (
			name <- s.name 
	)
}

lazy rule Attributes extends Property{
	from s: SimpleUML!Property (not s.primitiveType.oclIsUndefined())
	to	t: ER!Attribute (
			type <- s.primitiveType	
	)
}

lazy abstract rule References extends Property {
	from s: SimpleUML!Property (not s.complexType.oclIsUndefined() )
	to t: ER!Reference (
			type <- s.complexType
	)
}

lazy rule WeakReferences extends References {
	from s: SimpleUML!Property (not s.isContainment)
	to t: ER!WeakReference 
}

lazy rule StrongReferences extends References{
	from s: SimpleUML!Property (s.isContainment)
	to t: ER!StrongReference 
}