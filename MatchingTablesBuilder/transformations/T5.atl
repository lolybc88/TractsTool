-- @path SimpleUML=/UML2ER/Metamodels/SimpleUml.ecore
-- @path ER=/UML2ER/Metamodels/ER.ecore

module UML2ER;
create OUT : ER from IN : SimpleUML;

rule Package {
	from
		s: SimpleUML!Package
	to
		t: ER!ERModel (
			entities <- s.ownedElements	
		)
}

helper context SimpleUML!Class def: allClasses : Sequence(SimpleUML!Class) =
 self.superClasses->
 	iterate(e; acc : Sequence(SimpleUML!Class) = Sequence {} | acc->
 		union(Set{e})
			->union(e.allClasses) );

helper context SimpleUML!Class def : getAllProperties : Sequence (SimpleUML!Properties) =
	self.allClasses.including(self).flatten()->
		collect(e | e.ownedProperty).flatten();

helper context SimpleUML!Class def : getAllAttributes : Sequence (SimpleUML!Properties) =
	self.getAllProperties -> select (e | not e.primitiveType.oclIsUndefined())
;

helper context SimpleUML!Class def : getAllNonContainmentReferences : Sequence (SimpleUML!Properties) =
	self.getAllProperties -> select (e | not e.complexType.oclIsUndefined() and not e.isContainment)
;

helper context SimpleUML!Class def : getAllContainmentReferences : Sequence (SimpleUML!Properties) =
	self.getAllProperties -> select (e | not e.complexType.oclIsUndefined() and e.isContainment)
;

rule Class {
	from s: SimpleUML!Class
	to t: ER!EntityType (
			name <- s.name,
			features <- s.getAllAttributes->collect (e | thisModule.Attributes(e)),
			features <- s.getAllNonContainmentReferences->collect (e | thisModule.WeakReferences(e)),
			features <- s.getAllContainmentReferences->collect (e | thisModule.StrongReferences(e))
	)
}

lazy rule Attributes{
	from s: SimpleUML!Property (not s.primitiveType.oclIsUndefined())
	to	t: ER!Attribute (
		name <- s.name,	
		type <- s.primitiveType	
	)
}

lazy rule WeakReferences {
	from s: SimpleUML!Property (not s.isContainment and not s.complexType.oclIsUndefined())
	to t: ER!WeakReference(
		name <- s.name,
		type <- s.complexType
	) 
}

lazy rule StrongReferences {
	from s: SimpleUML!Property (s.isContainment and not s.complexType.oclIsUndefined())
	to t: ER!StrongReference (
		name <- s.name,
		type <- s.complexType
	) 
}